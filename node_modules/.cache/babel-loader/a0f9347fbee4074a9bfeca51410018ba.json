{"ast":null,"code":"var _jsxFileName = \"/Users/sauhilfaraz/Desktop/Launch Training/SchoolAdminPage/src/Student.js\";\nimport React from 'react';\nimport './App.css';\nimport './index.js';\nimport firebase from 'firebase';\nimport app from './firebase';\n\nclass Student extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      const dataRef = firebase.database().ref('students');\n      dataRef.on('value', snapshot => {\n        let elements = snapshot.val();\n        let newState = [];\n\n        for (let element in elements) {\n          newState.push({\n            id: element,\n            name: elements[element].name,\n            age: elements[element].age,\n            grade: elements[element].grade,\n            gender: elements[element].gender\n          });\n        }\n\n        this.setState({\n          elements: newState\n        });\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        // The \"name\" in e.target.name refers to 'name'\n        // in our input elements under render()\n        // Example: <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n        // In the example above, the 'name' variable contains our key\n        // 'age'\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      // I believe 'preventDefault()' allows our data to update\n      // once we click the 'submit' button without refreshing\n      // the whole web page\n      e.preventDefault(); // Here we are creating a new reference called \"students\"\n\n      const dataRef = firebase.database().ref('students');\n      const student = {\n        // Inside our 'students' object, we are putting in the keys\n        // 'name', 'age', 'grade', and 'gender' along with their values\n        // from the above method 'handleChange'\n        name: this.state.name,\n        age: this.state.age,\n        grade: this.state.grade,\n        gender: this.state.gender\n      }; // Push the object 'student' to the dataRef variable\n      // Remember that the dataRef variable creates a reference to \n      // the 'students' object in our database\n\n      dataRef.push(student); // Set all of our key values back to empty values so we can\n      // input new values\n\n      this.setState({\n        name: '',\n        age: '',\n        grade: '',\n        gender: ''\n      });\n    };\n\n    this.classData = app.database();\n    this.state = {\n      name: \"\",\n      age: \"\",\n      grade: \"\",\n      gender: \"\",\n      elements: []\n    }; // Bind our handleChange and handleSubmit functions\n    // so that they can update everytime we utilize an element \n    // such as a button that uses the handleSubmit function\n    // or an input element that uses the handleChange function\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"StudentMain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"add-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Student Name\",\n      onChange: this.handleChange,\n      value: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"age\",\n      placeholder: \"Student Age\",\n      onChange: this.handleChange,\n      value: this.state.age,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"grade\",\n      placeholder: \"Student Grade\",\n      onChange: this.handleChange,\n      value: this.state.grade,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"gender\",\n      placeholder: \"Student Gender\",\n      onChange: this.handleChange,\n      value: this.state.gender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, \"Add Item\"))));\n  }\n\n}\n\nexport default Student;","map":{"version":3,"sources":["/Users/sauhilfaraz/Desktop/Launch Training/SchoolAdminPage/src/Student.js"],"names":["React","firebase","app","Student","Component","constructor","props","componentDidMount","dataRef","database","ref","on","snapshot","elements","val","newState","element","push","id","name","age","grade","gender","setState","handleChange","e","target","value","handleSubmit","preventDefault","student","state","classData","bind","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './index.js'\nimport firebase from 'firebase';\nimport app  from './firebase';\n\nclass Student extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.classData = app.database();\n\n        this.state = {\n            name: \"\",\n            age: \"\",\n            grade: \"\",\n            gender: \"\",\n            elements: []\n        }\n        // Bind our handleChange and handleSubmit functions\n        // so that they can update everytime we utilize an element \n        // such as a button that uses the handleSubmit function\n        // or an input element that uses the handleChange function\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount = () => {\n        const dataRef = firebase.database().ref('students');\n        dataRef.on('value', (snapshot) => {\n            let elements = snapshot.val();\n            let newState = [];\n            for(let element in elements) {\n                newState.push({\n                    id: element,\n                    name: elements[element].name,\n                    age: elements[element].age,\n                    grade: elements[element].grade,\n                    gender: elements[element].gender\n                });\n            }\n\n            this.setState({\n                elements: newState\n            });\n        });\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            // The \"name\" in e.target.name refers to 'name'\n            // in our input elements under render()\n            // Example: <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n            // In the example above, the 'name' variable contains our key\n            // 'age'\n          [e.target.name]: e.target.value\n        });\n      }\n\n      handleSubmit = (e) => {\n          // I believe 'preventDefault()' allows our data to update\n          // once we click the 'submit' button without refreshing\n          // the whole web page\n        e.preventDefault();\n        // Here we are creating a new reference called \"students\"\n        const dataRef = firebase.database().ref('students');\n        const student = {\n            // Inside our 'students' object, we are putting in the keys\n            // 'name', 'age', 'grade', and 'gender' along with their values\n            // from the above method 'handleChange'\n          name: this.state.name,\n          age: this.state.age,\n          grade: this.state.grade,\n          gender: this.state.gender\n        }\n        // Push the object 'student' to the dataRef variable\n        // Remember that the dataRef variable creates a reference to \n        // the 'students' object in our database\n        dataRef.push(student);\n        // Set all of our key values back to empty values so we can\n        // input new values\n        this.setState({\n          name: '',\n          age: '',\n          grade: '',\n          gender: ''\n        });\n      }\n\n      \n    render(){            \n        return(\n            <div className=\"StudentMain\"> \n            <section className=\"add-item\">\n\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" placeholder=\"Student Name\" onChange={this.handleChange} value={this.state.name} />\n                <input type=\"text\" name=\"age\" placeholder=\"Student Age\" onChange={this.handleChange} value={this.state.age} />\n                <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n                <input type=\"text\" name=\"gender\" placeholder=\"Student Gender\" onChange={this.handleChange} value={this.state.gender} />\n                <button>Add Item</button>\n            </form>\n\n            </section>\n            </div>\n\n\n        )\n\n    }\n}\n\nexport default Student;"]},"metadata":{},"sourceType":"module"}