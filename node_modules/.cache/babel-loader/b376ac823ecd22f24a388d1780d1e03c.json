{"ast":null,"code":"var _jsxFileName = \"/Users/sauhilfaraz/Desktop/Launch Training/SchoolAdminPage/src/Components/Student.js\";\nimport React from 'react';\nimport '../App.css';\nimport '../index.js';\nimport firebase from 'firebase';\nimport app from '../firebase'; // import DisplayData from './DisplayData.js';\n\nclass Student extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        // The \"name\" in e.target.name refers to 'name'\n        // in our input elements under render()\n        // Example: <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n        // In the example above, the 'name' variable contains our key\n        // 'age'\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      // I believe 'preventDefault()' allows our data to update\n      // once we click the 'submit' button without refreshing\n      // the whole web page\n      e.preventDefault(); // Here we are creating a new reference called \"students\"\n\n      const dataRef = firebase.database().ref('students');\n      const student = {\n        // Inside our 'students' object, we are putting in the keys\n        // 'name', 'age', 'grade', and 'gender' along with their values\n        // from the above method 'handleChange'\n        name: this.state.name,\n        age: this.state.age,\n        grade: this.state.grade,\n        class: this.state.class,\n        gender: this.state.gender\n      }; // Push the object 'student' to the dataRef variable\n      // Remember that the dataRef variable creates a reference to \n      // the 'students' object in our database\n\n      dataRef.push(student); // Set all of our key values back to empty values so we can\n      // input new values\n\n      this.setState({\n        name: '',\n        age: '',\n        grade: '',\n        class: '',\n        gender: ''\n      });\n    };\n\n    this.classData = app.database();\n    this.state = {\n      name: \"\",\n      age: \"\",\n      grade: \"\",\n      class: \"\",\n      gender: \"\",\n      items: []\n    }; // Bind our handleChange and handleSubmit functions\n    // so that they can update everytime we utilize an element \n    // such as a button that uses the handleSubmit function\n    // or an input element that uses the handleChange function\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const itemsRef = firebase.database().ref('students');\n    itemsRef.on('value', snapshot => {\n      let items = snapshot.val();\n      let newState = [];\n\n      for (let item in items) {\n        newState.push({\n          id: item,\n          name: items[item].name,\n          age: items[item].age,\n          grade: items[item].grade,\n          class: items[item].class,\n          gender: items[item].gender\n        });\n      }\n\n      this.setState({\n        items: newState\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"StudentMain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"add-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Student Name\",\n      onChange: this.handleChange,\n      value: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"age\",\n      placeholder: \"Student Age\",\n      onChange: this.handleChange,\n      value: this.state.age,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"grade\",\n      placeholder: \"Student Grade\",\n      onChange: this.handleChange,\n      value: this.state.grade,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"class\",\n      placeholder: \"Student Class\",\n      onChange: this.handleChange,\n      value: this.state.class,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"gender\",\n      placeholder: \"Student Gender\",\n      onChange: this.handleChange,\n      value: this.state.gender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"Add Student Info\"))));\n  }\n\n}\n\nexport default Student;","map":{"version":3,"sources":["/Users/sauhilfaraz/Desktop/Launch Training/SchoolAdminPage/src/Components/Student.js"],"names":["React","firebase","app","Student","Component","constructor","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","dataRef","database","ref","student","state","age","grade","class","gender","push","classData","items","bind","componentDidMount","itemsRef","on","snapshot","val","newState","item","id","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport '../index.js'\nimport firebase from 'firebase';\nimport app  from '../firebase';\n// import DisplayData from './DisplayData.js';\n\nclass Student extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.classData = app.database();\n\n        this.state = {\n            name: \"\",\n            age: \"\",\n            grade: \"\",\n            class:\"\",\n            gender: \"\",\n            items: []\n        }\n        // Bind our handleChange and handleSubmit functions\n        // so that they can update everytime we utilize an element \n        // such as a button that uses the handleSubmit function\n        // or an input element that uses the handleChange function\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        const itemsRef = firebase.database().ref('students');\n        itemsRef.on('value', (snapshot) => {\n          let items = snapshot.val();\n          let newState = [];\n          for (let item in items) {\n            newState.push({\n              id: item,\n              name: items[item].name,\n              age: items[item].age,\n              grade: items[item].grade,\n              class: items[item].class,\n              gender: items[item].gender\n            });\n          }\n          this.setState({\n            items: newState\n          });\n        });\n      }\n\n    handleChange = (e) => {\n        this.setState({\n            // The \"name\" in e.target.name refers to 'name'\n            // in our input elements under render()\n            // Example: <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n            // In the example above, the 'name' variable contains our key\n            // 'age'\n          [e.target.name]: e.target.value\n        });\n      }\n\n      handleSubmit = (e) => {\n          // I believe 'preventDefault()' allows our data to update\n          // once we click the 'submit' button without refreshing\n          // the whole web page\n        e.preventDefault();\n        // Here we are creating a new reference called \"students\"\n        const dataRef = firebase.database().ref('students');\n        const student = {\n            // Inside our 'students' object, we are putting in the keys\n            // 'name', 'age', 'grade', and 'gender' along with their values\n            // from the above method 'handleChange'\n          name: this.state.name,\n          age: this.state.age,\n          grade: this.state.grade,\n          class: this.state.class,\n          gender: this.state.gender\n        }\n        // Push the object 'student' to the dataRef variable\n        // Remember that the dataRef variable creates a reference to \n        // the 'students' object in our database\n        dataRef.push(student);\n        // Set all of our key values back to empty values so we can\n        // input new values\n        this.setState({\n          name: '',\n          age: '',\n          grade: '',\n          class: '',\n          gender: ''\n        });\n      }\n\n      \n    render(){            \n        return(\n            <div className=\"StudentMain\"> \n            <section className=\"add-item\">\n\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" placeholder=\"Student Name\" onChange={this.handleChange} value={this.state.name} />\n                <input type=\"text\" name=\"age\" placeholder=\"Student Age\" onChange={this.handleChange} value={this.state.age} />\n                <input type=\"text\" name=\"grade\" placeholder=\"Student Grade\" onChange={this.handleChange} value={this.state.grade} />\n                <input type=\"text\" name=\"class\" placeholder=\"Student Class\" onChange={this.handleChange} value={this.state.class} />\n                <input type=\"text\" name=\"gender\" placeholder=\"Student Gender\" onChange={this.handleChange} value={this.state.gender} />\n                <button>Add Student Info</button>\n            </form>\n\n            </section>\n\n            {/* <DisplayData dataVal = {this.state.elements}/> */}\n            </div>\n\n\n        )\n\n    }\n}\n\nexport default Student;"]},"metadata":{},"sourceType":"module"}